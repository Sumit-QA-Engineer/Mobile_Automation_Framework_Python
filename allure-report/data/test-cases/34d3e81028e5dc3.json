{"uid":"34d3e81028e5dc3","name":"test_upload_file","fullName":"src.python.tests.test_TC_003_upload_content#test_upload_file","historyId":"de8018c166c6495f62cedf910c6735c0","time":{"start":1692275793676,"stop":1692275806038,"duration":12362},"description":"upload_content.feature: Upload File","descriptionHtml":"<p>upload_content.feature: Upload File</p>\n","status":"broken","statusMessage":"TypeError: appium.webdriver.webdriver.WebDriver.find_element() argument after * must be an iterable, not RaisesContext","statusTrace":"fixturefunc = <function tap_select_files_to_upload_option at 0x000001CF9D0B8220>, request = <FixtureRequest for <Function test_upload_file>>, kwargs = {}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\nvenv\\Lib\\site-packages\\_pytest\\fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\python\\tests\\test_TC_003_upload_content.py:48: in tap_select_files_to_upload_option\n    home.tap_select_file_to_upload()\nsrc\\main\\pages\\home_screen.py:40: in tap_select_file_to_upload\n    self.click(self.section, 'UPLOAD_FILE_XPATH')\nsrc\\main\\pages\\base_page.py:49: in click\n    wait_cl = self.wait_for_element_to_be_clickable(element)\nsrc\\main\\pages\\base_page.py:98: in wait_for_element_to_be_clickable\n    element = WebDriverWait(self.driver, timeout).until(\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:86: in until\n    value = method(self._driver)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"0072e2ef93af12a8d6b5c81a1f69da556f4ce0d0\")>\n\n    def _predicate(driver):\n        target = mark\n        if not isinstance(target, WebElement):  # if given locator instead of WebElement\n>           target = driver.find_element(*target)  # grab element at locator\nE           TypeError: appium.webdriver.webdriver.WebDriver.find_element() argument after * must be an iterable, not RaisesContext\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:355: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"appium_driver","time":{"start":1692275739240,"stop":1692275773914,"duration":34674},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"teardown","time":{"start":1692275773915,"stop":1692275773915,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"log_on_failure","time":{"start":1692275793675,"stop":1692275793675,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"_pytest_bdd_example","time":{"start":1692275793675,"stop":1692275793675,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"description":"upload_content.feature: Upload File","status":"broken","statusMessage":"TypeError: appium.webdriver.webdriver.WebDriver.find_element() argument after * must be an iterable, not RaisesContext","statusTrace":"fixturefunc = <function tap_select_files_to_upload_option at 0x000001CF9D0B8220>, request = <FixtureRequest for <Function test_upload_file>>, kwargs = {}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\nvenv\\Lib\\site-packages\\_pytest\\fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\python\\tests\\test_TC_003_upload_content.py:48: in tap_select_files_to_upload_option\n    home.tap_select_file_to_upload()\nsrc\\main\\pages\\home_screen.py:40: in tap_select_file_to_upload\n    self.click(self.section, 'UPLOAD_FILE_XPATH')\nsrc\\main\\pages\\base_page.py:49: in click\n    wait_cl = self.wait_for_element_to_be_clickable(element)\nsrc\\main\\pages\\base_page.py:98: in wait_for_element_to_be_clickable\n    element = WebDriverWait(self.driver, timeout).until(\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:86: in until\n    value = method(self._driver)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"0072e2ef93af12a8d6b5c81a1f69da556f4ce0d0\")>\n\n    def _predicate(driver):\n        target = mark\n        if not isinstance(target, WebElement):  # if given locator instead of WebElement\n>           target = driver.find_element(*target)  # grab element at locator\nE           TypeError: appium.webdriver.webdriver.WebDriver.find_element() argument after * must be an iterable, not RaisesContext\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:355: TypeError","steps":[],"attachments":[{"uid":"70e70dbb263d007","name":"stdout","source":"70e70dbb263d007.txt","type":"text/plain","size":141}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[{"name":"log_on_failure::0","time":{"start":1692275806223,"stop":1692275807342,"duration":1119},"status":"passed","steps":[],"attachments":[{"uid":"c51f304adb08cf15","name":"test_upload_file_2023_08_17_18_06.png","source":"c51f304adb08cf15.png","type":"image/png","size":154164}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false},{"name":"teardown::0","time":{"start":1692275841877,"stop":1692275843066,"duration":1189},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures"},{"name":"parentSuite","value":"src.python.tests"},{"name":"suite","value":"test_TC_003_upload_content"},{"name":"host","value":"HAMILTON-QA11L"},{"name":"thread","value":"17924-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"src.python.tests.test_TC_003_upload_content"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures"]},"source":"34d3e81028e5dc3.json","parameterValues":[]}