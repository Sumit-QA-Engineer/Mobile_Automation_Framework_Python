{"uid":"b1307acda2e498f3","name":"test_user_logout","fullName":"src.python.tests.test_TC_005_user_logout#test_user_logout","historyId":"86c71ee7a678c436bf305296032d4b6b","time":{"start":1692275830445,"stop":1692275840742,"duration":10297},"description":"user_logout.feature: Successful Logout","descriptionHtml":"<p>user_logout.feature: Successful Logout</p>\n","status":"failed","statusMessage":"AssertionError: !!!! Test Failed! Pre-condition does not met - User is not logged in the application !!!!\nassert False\n +  where False = <bound method loginScreen.verify_login of <src.main.pages.login_screen.loginScreen object at 0x000001CF9D0DBC10>>()\n +    where <bound method loginScreen.verify_login of <src.main.pages.login_screen.loginScreen object at 0x000001CF9D0DBC10>> = <src.main.pages.login_screen.loginScreen object at 0x000001CF9D0DBC10>.verify_login\n +      where <src.main.pages.login_screen.loginScreen object at 0x000001CF9D0DBC10> = loginScreen(<appium.webdriver.webdriver.WebDriver (session=\"0072e2ef93af12a8d6b5c81a1f69da556f4ce0d0\")>)","statusTrace":"fixturefunc = <function pre_condition_1 at 0x000001CF9D0B9F80>, request = <FixtureRequest for <Function test_user_logout>>\nkwargs = {'appium_driver': <appium.webdriver.webdriver.WebDriver (session=\"0072e2ef93af12a8d6b5c81a1f69da556f4ce0d0\")>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\nvenv\\Lib\\site-packages\\_pytest\\fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nappium_driver = <appium.webdriver.webdriver.WebDriver (session=\"0072e2ef93af12a8d6b5c81a1f69da556f4ce0d0\")>\n\n    @given('User is logged in the application')\n    def pre_condition_1(appium_driver):\n        global driver\n        driver = appium_driver\n>       assert loginScreen(driver).verify_login(), (\"!!!! Test Failed! Pre-condition does not met - User is not \"\n                                                           \"logged in the application !!!!\")\nE       AssertionError: !!!! Test Failed! Pre-condition does not met - User is not logged in the application !!!!\nE       assert False\nE        +  where False = <bound method loginScreen.verify_login of <src.main.pages.login_screen.loginScreen object at 0x000001CF9D0DBC10>>()\nE        +    where <bound method loginScreen.verify_login of <src.main.pages.login_screen.loginScreen object at 0x000001CF9D0DBC10>> = <src.main.pages.login_screen.loginScreen object at 0x000001CF9D0DBC10>.verify_login\nE        +      where <src.main.pages.login_screen.loginScreen object at 0x000001CF9D0DBC10> = loginScreen(<appium.webdriver.webdriver.WebDriver (session=\"0072e2ef93af12a8d6b5c81a1f69da556f4ce0d0\")>)\n\nsrc\\python\\tests\\test_TC_005_user_logout.py:21: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"appium_driver","time":{"start":1692275739240,"stop":1692275773914,"duration":34674},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"teardown","time":{"start":1692275773915,"stop":1692275773915,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"_pytest_bdd_example","time":{"start":1692275830444,"stop":1692275830444,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"log_on_failure","time":{"start":1692275830444,"stop":1692275830444,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"description":"user_logout.feature: Successful Logout","status":"failed","statusMessage":"AssertionError: !!!! Test Failed! Pre-condition does not met - User is not logged in the application !!!!\nassert False\n +  where False = <bound method loginScreen.verify_login of <src.main.pages.login_screen.loginScreen object at 0x000001CF9D0DBC10>>()\n +    where <bound method loginScreen.verify_login of <src.main.pages.login_screen.loginScreen object at 0x000001CF9D0DBC10>> = <src.main.pages.login_screen.loginScreen object at 0x000001CF9D0DBC10>.verify_login\n +      where <src.main.pages.login_screen.loginScreen object at 0x000001CF9D0DBC10> = loginScreen(<appium.webdriver.webdriver.WebDriver (session=\"0072e2ef93af12a8d6b5c81a1f69da556f4ce0d0\")>)","statusTrace":"fixturefunc = <function pre_condition_1 at 0x000001CF9D0B9F80>, request = <FixtureRequest for <Function test_user_logout>>\nkwargs = {'appium_driver': <appium.webdriver.webdriver.WebDriver (session=\"0072e2ef93af12a8d6b5c81a1f69da556f4ce0d0\")>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\nvenv\\Lib\\site-packages\\_pytest\\fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nappium_driver = <appium.webdriver.webdriver.WebDriver (session=\"0072e2ef93af12a8d6b5c81a1f69da556f4ce0d0\")>\n\n    @given('User is logged in the application')\n    def pre_condition_1(appium_driver):\n        global driver\n        driver = appium_driver\n>       assert loginScreen(driver).verify_login(), (\"!!!! Test Failed! Pre-condition does not met - User is not \"\n                                                           \"logged in the application !!!!\")\nE       AssertionError: !!!! Test Failed! Pre-condition does not met - User is not logged in the application !!!!\nE       assert False\nE        +  where False = <bound method loginScreen.verify_login of <src.main.pages.login_screen.loginScreen object at 0x000001CF9D0DBC10>>()\nE        +    where <bound method loginScreen.verify_login of <src.main.pages.login_screen.loginScreen object at 0x000001CF9D0DBC10>> = <src.main.pages.login_screen.loginScreen object at 0x000001CF9D0DBC10>.verify_login\nE        +      where <src.main.pages.login_screen.loginScreen object at 0x000001CF9D0DBC10> = loginScreen(<appium.webdriver.webdriver.WebDriver (session=\"0072e2ef93af12a8d6b5c81a1f69da556f4ce0d0\")>)\n\nsrc\\python\\tests\\test_TC_005_user_logout.py:21: AssertionError","steps":[],"attachments":[{"uid":"25dd9565e565cf97","name":"stdout","source":"25dd9565e565cf97.txt","type":"text/plain","size":118}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[{"name":"log_on_failure::0","time":{"start":1692275840771,"stop":1692275841872,"duration":1101},"status":"passed","steps":[],"attachments":[{"uid":"69f758284e731d70","name":"test_user_logout_2023_08_17_18_07.png","source":"69f758284e731d70.png","type":"image/png","size":154520}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false},{"name":"teardown::0","time":{"start":1692275841877,"stop":1692275843066,"duration":1189},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures"},{"name":"parentSuite","value":"src.python.tests"},{"name":"suite","value":"test_TC_005_user_logout"},{"name":"host","value":"HAMILTON-QA11L"},{"name":"thread","value":"17924-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"src.python.tests.test_TC_005_user_logout"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures"]},"source":"b1307acda2e498f3.json","parameterValues":[]}